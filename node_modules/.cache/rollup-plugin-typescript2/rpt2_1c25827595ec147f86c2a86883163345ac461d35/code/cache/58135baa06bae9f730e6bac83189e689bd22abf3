{"code":"export const Harvester = {\r\n    /** @param {Creep} creep **/\r\n    run: function (creep, linkList) {\r\n        if (!creep.memory.working && creep.store[RESOURCE_ENERGY] == 0) {\r\n            creep.memory.working = true;\r\n        }\r\n        if (creep.memory.working && creep.store.getFreeCapacity() == 0) {\r\n            creep.memory.working = false;\r\n        }\r\n        if (!creep.memory.working) {\r\n            var targets = creep.room.find(FIND_STRUCTURES, {\r\n                filter: (structure) => {\r\n                    return (structure.structureType == STRUCTURE_EXTENSION && structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0) ||\r\n                        (structure.structureType == STRUCTURE_TOWER && structure.store[RESOURCE_ENERGY] <= 800);\r\n                }\r\n            });\r\n            targets = _.sortBy(targets, (s) => creep.pos.getRangeTo(s)); //creep.pos.getRangeTo\r\n            var spawns = creep.room.find(FIND_STRUCTURES, { filter: (s) => s.structureType == STRUCTURE_SPAWN && s.store.getFreeCapacity(RESOURCE_ENERGY) > 0 });\r\n            if (targets.length && creep.store[RESOURCE_ENERGY] == creep.store.getUsedCapacity()) {\r\n                if (creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(targets[0], { visualizePathStyle: { stroke: '#ffffff' } });\r\n                }\r\n            }\r\n            // if tower and extensions are full\r\n            else if (spawns.length && creep.store[RESOURCE_ENERGY] == creep.store.getUsedCapacity()) {\r\n                if (creep.transfer(spawns[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(spawns[0]);\r\n                }\r\n            }\r\n            //if nothing to store or carrying not ENERGY-ONLY\r\n            else {\r\n                var storage = creep.room.storage;\r\n                for (const resourceType in creep.store) {\r\n                    if (creep.transfer(storage, resourceType) == ERR_NOT_IN_RANGE) {\r\n                        creep.moveTo(storage);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // if (creep.withdraw(creep.room.storage,RESOURCE_ENERGY) == ERR_NOT_IN_RANGE){\r\n            //     creep.moveTo(creep.room.storage)\r\n            // }\r\n            var droppedEnergy = creep.room.find(FIND_DROPPED_RESOURCES, {\r\n                filter: (d) => d.amount >= 10\r\n            });\r\n            var tombEnergy = creep.room.find(FIND_TOMBSTONES, {\r\n                filter: (s) => s.store.getUsedCapacity() > 0\r\n            });\r\n            var linkCheck = _.filter(linkList, (l) => l.store.getUsedCapacity(RESOURCE_ENERGY) > 0);\r\n            if (droppedEnergy.length) {\r\n                if (creep.pickup(droppedEnergy[0]) == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(droppedEnergy[0]);\r\n                }\r\n            }\r\n            else if (tombEnergy.length) {\r\n                for (const resourceType in tombEnergy[0].store) {\r\n                    if (creep.withdraw(tombEnergy[0], resourceType) == ERR_NOT_IN_RANGE) {\r\n                        creep.moveTo(tombEnergy[0]);\r\n                    }\r\n                }\r\n            }\r\n            else if (linkCheck.length) {\r\n                if (creep.withdraw(linkCheck[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(linkCheck[0]);\r\n                }\r\n            }\r\n            else {\r\n                let sources = creep.room.find(FIND_STRUCTURES, {\r\n                    filter: (s) => s.structureType == STRUCTURE_CONTAINER && s.store[RESOURCE_ENERGY] > 0\r\n                });\r\n                let source = _.sortBy(sources, (s) => s.store[RESOURCE_ENERGY]).reverse();\r\n                if (source.length) {\r\n                    if (creep.withdraw(source[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                        creep.moveTo(source[0]);\r\n                    }\r\n                }\r\n                else {\r\n                    if (creep.harvest(creep.pos.findClosestByRange(FIND_SOURCES_ACTIVE)) == ERR_NOT_IN_RANGE) {\r\n                        creep.moveTo(creep.pos.findClosestByRange(FIND_SOURCES_ACTIVE), { visualizePathStyle: { stroke: '#ffaa00' } });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n//# sourceMappingURL=Harvester.js.map","references":["D:/Screeps/node_modules/typescript/lib/typescript.d.ts","D:/Screeps/src/modules/Creep/Upgrader.ts"],"map":"{\"version\":3,\"file\":\"Harvester.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/modules/Creep/Harvester.ts\"],\"names\":[],\"mappings\":\"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\"}"}
