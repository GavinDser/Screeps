{"code":"import { Harvester as harvester } from \"./Harvester\";\r\nexport const CrossHarvester = {\r\n    /** @param {Creep} creep **/\r\n    run: function (creep) {\r\n        if (!creep.memory.working && creep.store[RESOURCE_ENERGY] == 0) {\r\n            creep.memory.working = true;\r\n        }\r\n        if (creep.memory.working && creep.store.getFreeCapacity() == 0) {\r\n            creep.memory.working = false;\r\n        }\r\n        if (creep.memory.working) {\r\n            if (creep.room.name == creep.memory.targetRoom) {\r\n                var findSource = function () {\r\n                    var source = creep.room.find(FIND_STRUCTURES, {\r\n                        filter: (s) => {\r\n                            return s.structureType == STRUCTURE_TOWER || s.structureType == STRUCTURE_EXTENSION && s.store[RESOURCE_ENERGY] > 0;\r\n                        }\r\n                    });\r\n                    return source[0];\r\n                    ;\r\n                };\r\n                creep.memory.source = findSource();\r\n                if (creep.memory.source != undefined) {\r\n                    if (creep.memory.source.store[RESOURCE_ENERGY] > 0) {\r\n                        if (creep.withdraw(creep.memory.source, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(creep.memory.source);\r\n                        }\r\n                    }\r\n                    else {\r\n                        creep.memory.source = findSource();\r\n                    }\r\n                }\r\n                else {\r\n                    creep.memory.working = false;\r\n                }\r\n            }\r\n            // if creep is not in the target room\r\n            else {\r\n                let exit = creep.room.findExitTo(creep.memory.targetRoom);\r\n                creep.moveTo(creep.pos.findClosestByRange(exit));\r\n            }\r\n            // finished harvesting\r\n        }\r\n        else {\r\n            if (creep.room.name == creep.memory.homeRoom) {\r\n                var storage = creep.room.find(FIND_STRUCTURES, {\r\n                    filter: (s) => {\r\n                        return s.structureType == STRUCTURE_STORAGE &&\r\n                            s.store.getFreeCapacity(RESOURCE_ENERGY) > 0;\r\n                    }\r\n                });\r\n                if (storage.length) {\r\n                    if (creep.transfer(storage[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                        creep.moveTo(storage[0], { visualizePathStyle: { stroke: '#ffffff' } });\r\n                    }\r\n                }\r\n                else {\r\n                    harvester.run(creep);\r\n                }\r\n            }\r\n            // if not in home room\r\n            else {\r\n                let exit = creep.room.findExitTo(creep.memory.homeRoom);\r\n                creep.moveTo(creep.pos.findClosestByRange(exit));\r\n            }\r\n        }\r\n    }\r\n};\r\n//# sourceMappingURL=CrossHarvester.js.map","references":["D:/Screeps文件/Screeps/src/modules/Creep/Harvester.ts","D:/Screeps文件/Screeps/src/modules/Creep/Builder.ts"],"map":"{\"version\":3,\"file\":\"CrossHarvester.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/modules/Creep/CrossHarvester.ts\"],\"names\":[],\"mappings\":\"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\"}"}
