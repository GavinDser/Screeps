{"code":"import { Harvester as harvester } from \"./Harvester\";\r\nimport { Upgrader as upgrader } from \"./Upgrader\";\r\nexport const TrashHarvester = {\r\n    /** @param {Creep} creep **/\r\n    run: function (creep) {\r\n        if (!creep.memory.working && creep.store[RESOURCE_ENERGY] == 0) {\r\n            creep.memory.working = true;\r\n        }\r\n        if (creep.memory.working && creep.store.getFreeCapacity() == 0) {\r\n            creep.memory.working = false;\r\n        }\r\n        if (creep.room.name == creep.memory.homeRoom) {\r\n            //全局使用判定是否过多能量，需要存storage\r\n            var tombEnergy = creep.room.find(FIND_TOMBSTONES, {\r\n                filter: (s) => s.store.getUsedCapacity() > 0\r\n            });\r\n            var droppedEnergy = creep.room.find(FIND_DROPPED_RESOURCES, {\r\n                filter: (d) => d.amount >= 0\r\n            });\r\n            var ruinEnergy = creep.room.find(FIND_RUINS, {\r\n                filter: (s) => s.store.getUsedCapacity() > 0\r\n            });\r\n            droppedEnergy = _.sortBy(droppedEnergy, (s) => creep.pos.getRangeTo(s));\r\n            if (!creep.memory.working) {\r\n                if (creep.store[RESOURCE_ENERGY] != creep.store.getUsedCapacity()) {\r\n                    var storage = creep.room.storage;\r\n                    for (const resourceType in creep.store) {\r\n                        if (creep.transfer(storage, resourceType) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(storage);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    let harvesterNum = _.filter(Game.creeps, (c) => c.memory.role == 'harvester' && c.memory.homeRoom == creep.room.name).length;\r\n                    let towers = creep.room.find(FIND_STRUCTURES, {\r\n                        filter: (structure) => {\r\n                            return (structure.structureType == STRUCTURE_TOWER && structure.store[RESOURCE_ENERGY] <= 700);\r\n                        }\r\n                    });\r\n                    //如果过多energy依然在墓地，则存storage\r\n                    if (tombEnergy.length || droppedEnergy.length || ruinEnergy.length) {\r\n                        if (creep.transfer(creep.room.storage, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(creep.room.storage);\r\n                        }\r\n                    }\r\n                    else if (harvesterNum < 1) {\r\n                        harvester.run(creep);\r\n                    }\r\n                    else if (towers.length) {\r\n                        if (creep.transfer(towers[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(towers[0], { visualizePathStyle: { stroke: '#ffffff' } });\r\n                        }\r\n                    }\r\n                    else {\r\n                        upgrader.run(creep);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (droppedEnergy.length) {\r\n                    if (creep.pickup(droppedEnergy[0]) == ERR_NOT_IN_RANGE) {\r\n                        creep.moveTo(droppedEnergy[0]);\r\n                    }\r\n                }\r\n                else if (tombEnergy.length) {\r\n                    for (const resourceType in tombEnergy[0].store) {\r\n                        if (creep.withdraw(tombEnergy[0], resourceType) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(tombEnergy[0]);\r\n                        }\r\n                    }\r\n                }\r\n                else if (ruinEnergy.length) {\r\n                    for (const resourceType in ruinEnergy[0].store) {\r\n                        if (creep.withdraw(ruinEnergy[0], resourceType) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(ruinEnergy[0]);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // let sources = creep.room.find(FIND_STRUCTURES, {\r\n                    //     filter: (s) => s.structureType == STRUCTURE_CONTAINER && s.store[RESOURCE_ENERGY] > 0\r\n                    // })\r\n                    // let source = _.sortBy(sources, (s:StructureContainer)=> s.store[RESOURCE_ENERGY]).reverse()\r\n                    // if (source.length){\r\n                    //     if (creep.withdraw(source[0],RESOURCE_ENERGY) == ERR_NOT_IN_RANGE){\r\n                    //         creep.moveTo(source[0]);\r\n                    //     }\r\n                    // }\r\n                    upgrader.run(creep);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let exit = creep.room.findExitTo(creep.memory.homeRoom);\r\n            creep.moveTo(creep.pos.findClosestByRange(exit));\r\n        }\r\n    }\r\n};\r\n//# sourceMappingURL=TrashHarvester.js.map","references":["D:/Screeps文件/Screeps/src/modules/Creep/Harvester.ts","D:/Screeps文件/Screeps/src/modules/Creep/Builder.ts","D:/Screeps文件/Screeps/src/modules/Creep/Upgrader.ts","D:/Screeps文件/Screeps/node_modules/typescript/lib/typescript.d.ts"],"map":"{\"version\":3,\"file\":\"TrashHarvester.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/modules/Creep/TrashHarvester.ts\"],\"names\":[],\"mappings\":\"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\"}"}
