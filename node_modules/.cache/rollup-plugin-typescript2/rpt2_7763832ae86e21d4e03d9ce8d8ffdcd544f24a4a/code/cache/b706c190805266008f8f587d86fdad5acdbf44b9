{"code":"import { Builder as builder } from \"./Builder\";\r\nexport const Harvester = {\r\n    /** @param {Creep} creep **/\r\n    run: function (creep) {\r\n        if (!creep.memory.working && creep.store[RESOURCE_ENERGY] == 0) {\r\n            creep.memory.working = true;\r\n        }\r\n        if (creep.memory.working && creep.store.getFreeCapacity() == 0) {\r\n            creep.memory.working = false;\r\n        }\r\n        if (!creep.memory.working) {\r\n            let extensions = creep.room.find(FIND_STRUCTURES, {\r\n                filter: (structure) => {\r\n                    return (structure.structureType == STRUCTURE_EXTENSION && structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0);\r\n                }\r\n            });\r\n            let spawns = creep.room.find(FIND_STRUCTURES, { filter: (s) => s.structureType == STRUCTURE_SPAWN && s.store.getFreeCapacity(RESOURCE_ENERGY) > 0 });\r\n            let labs = creep.room.find(FIND_STRUCTURES, {\r\n                filter: (s) => {\r\n                    return (s.structureType == STRUCTURE_LAB && s.store[RESOURCE_ENERGY] < 1500);\r\n                }\r\n            });\r\n            let towers = creep.room.find(FIND_STRUCTURES, {\r\n                filter: (structure) => {\r\n                    return (structure.structureType == STRUCTURE_TOWER && structure.store[RESOURCE_ENERGY] <= 700);\r\n                }\r\n            });\r\n            extensions = _.sortBy(extensions, (s) => creep.pos.getRangeTo(s)); //creep.pos.getRangeTo\r\n            // if (creep.memory.homeRoom == \"E37S48\"){\r\n            //     if (towers.length){\r\n            //         if (creep.transfer(towers[0],RESOURCE_ENERGY) == ERR_NOT_IN_RANGE){\r\n            //             creep.moveTo(towers[0])\r\n            //         } \r\n            //     }\r\n            // }\r\n            if (extensions.length) {\r\n                if (creep.transfer(extensions[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(extensions[0], { visualizePathStyle: { stroke: '#ffffff' } });\r\n                }\r\n            }\r\n            else if (spawns.length) {\r\n                if (creep.transfer(spawns[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(spawns[0]);\r\n                }\r\n            }\r\n            // if extensions and spawns are full\r\n            else if (labs.length) {\r\n                if (creep.transfer(labs[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(labs[0], { visualizePathStyle: { stroke: '#ffffff' } });\r\n                }\r\n            }\r\n            //if nothing to store or carrying not ENERGY-ONLY\r\n            else {\r\n                if (creep.room.storage) {\r\n                    var storage = creep.room.storage;\r\n                    for (const resourceType in creep.store) {\r\n                        if (creep.transfer(storage, resourceType) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(storage);\r\n                        }\r\n                    }\r\n                }\r\n                //删\r\n                else {\r\n                    builder.run(creep);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // if (creep.withdraw(creep.room.storage,RESOURCE_ENERGY) == ERR_NOT_IN_RANGE){\r\n            //     creep.moveTo(creep.room.storage)\r\n            // }\r\n            let link = Game.getObjectById(creep.memory.linkId);\r\n            if (link && link.store[RESOURCE_ENERGY] > 0) {\r\n                if (creep.withdraw(link, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(link);\r\n                }\r\n            }\r\n            else {\r\n                let sources = creep.room.find(FIND_STRUCTURES, {\r\n                    filter: (s) => s.structureType == STRUCTURE_CONTAINER && s.store[RESOURCE_ENERGY] > 0\r\n                });\r\n                let source = _.sortBy(sources, (s) => s.store[RESOURCE_ENERGY]).reverse();\r\n                if (creep.memory.stateSwitch == false) {\r\n                    creep.memory.containerId = source[0].id;\r\n                    creep.memory.stateSwitch = true;\r\n                }\r\n                if (source.length) {\r\n                    if (creep.withdraw(Game.getObjectById(creep.memory.containerId), RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                        creep.moveTo(Game.getObjectById(creep.memory.containerId));\r\n                    }\r\n                    else {\r\n                        creep.memory.stateSwitch = false;\r\n                    }\r\n                }\r\n                else {\r\n                    if (creep.memory.sourceId) {\r\n                        if (creep.harvest(Game.getObjectById(creep.memory.sourceId)) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(Game.getObjectById(creep.memory.sourceId));\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (creep.harvest(creep.pos.findClosestByRange(FIND_SOURCES_ACTIVE)) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(creep.pos.findClosestByRange(FIND_SOURCES_ACTIVE), { visualizePathStyle: { stroke: '#ffaa00' } });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n//# sourceMappingURL=Harvester.js.map","references":["D:/Screeps文件/Screeps/src/modules/Creep/Builder.ts"],"map":"{\"version\":3,\"file\":\"Harvester.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/modules/Creep/Harvester.ts\"],\"names\":[],\"mappings\":\"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\"}"}
