{"code":"import { Harvester as harvester } from \"./Harvester\";\r\nimport { Upgrader as upgrader } from \"./Upgrader\";\r\nimport { Builder as builder } from \"./Builder\";\r\nexport const TrashHarvester = {\r\n    /** @param {Creep} creep **/\r\n    run: function (creep) {\r\n        if (!creep.memory.working && creep.store[RESOURCE_ENERGY] == 0) {\r\n            creep.memory.working = true;\r\n        }\r\n        if (creep.memory.working && creep.store.getFreeCapacity() == 0) {\r\n            creep.memory.working = false;\r\n        }\r\n        if (creep.room.name == creep.memory.homeRoom) {\r\n            //全局使用判定是否过多能量，需要存storage\r\n            var tombEnergy = creep.room.find(FIND_TOMBSTONES, {\r\n                filter: (s) => s.store.getUsedCapacity() > 0\r\n            });\r\n            var droppedEnergy = creep.room.find(FIND_DROPPED_RESOURCES, {\r\n                filter: (d) => d.amount >= 500\r\n            });\r\n            droppedEnergy = _.sortBy(droppedEnergy, (e) => e.amount).reverse();\r\n            var ruinEnergy = creep.room.find(FIND_RUINS, {\r\n                filter: (s) => s.store.getUsedCapacity() > 0\r\n            });\r\n            droppedEnergy = _.sortBy(droppedEnergy, (s) => creep.pos.getRangeTo(s));\r\n            if (!creep.memory.working) {\r\n                if (creep.store[RESOURCE_ENERGY] != creep.store.getUsedCapacity()) {\r\n                    var storage = creep.room.storage;\r\n                    for (const resourceType in creep.store) {\r\n                        if (creep.transfer(storage, resourceType) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(storage);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    let harvesterNum = _.filter(Game.creeps, (c) => c.memory.role == 'harvester' && c.memory.homeRoom == creep.room.name).length;\r\n                    let towers = creep.room.find(FIND_STRUCTURES, {\r\n                        filter: (structure) => {\r\n                            return (structure.structureType == STRUCTURE_TOWER && structure.store[RESOURCE_ENERGY] <= 500);\r\n                        }\r\n                    });\r\n                    //如果过多energy依然在墓地，则存storage\r\n                    if (tombEnergy.length || ruinEnergy.length || droppedEnergy.length) {\r\n                        if (creep.transfer(creep.room.storage, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(creep.room.storage);\r\n                        }\r\n                    }\r\n                    else if (harvesterNum < 1) {\r\n                        harvester.run(creep);\r\n                    }\r\n                    else if (towers.length) {\r\n                        if (creep.transfer(towers[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(towers[0], { visualizePathStyle: { stroke: '#ffffff' } });\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (creep.room.controller.level == 8) {\r\n                            builder.run(creep);\r\n                        }\r\n                        else if (creep.memory.homeRoom == \"E39S47\") {\r\n                            let targets = creep.room.find(FIND_CONSTRUCTION_SITES);\r\n                            if (targets.length) {\r\n                                if (creep.build(targets[0]) == ERR_NOT_IN_RANGE) {\r\n                                    creep.moveTo(targets[0], { visualizePathStyle: { stroke: '#ffffff' } });\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            upgrader.run(creep);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                let containerNonEnergy = creep.room.find(FIND_STRUCTURES, {\r\n                    filter: (s) => s.structureType == STRUCTURE_CONTAINER && s.store[RESOURCE_ENERGY] != s.store.getUsedCapacity()\r\n                });\r\n                if (droppedEnergy.length) {\r\n                    if (creep.pickup(droppedEnergy[0]) == ERR_NOT_IN_RANGE) {\r\n                        creep.moveTo(droppedEnergy[0]);\r\n                    }\r\n                }\r\n                else if (tombEnergy.length) {\r\n                    for (const resourceType in tombEnergy[0].store) {\r\n                        if (creep.withdraw(tombEnergy[0], resourceType) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(tombEnergy[0]);\r\n                        }\r\n                    }\r\n                }\r\n                else if (ruinEnergy.length) {\r\n                    for (const resourceType in ruinEnergy[0].store) {\r\n                        if (creep.withdraw(ruinEnergy[0], resourceType) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(ruinEnergy[0]);\r\n                        }\r\n                    }\r\n                }\r\n                else if (containerNonEnergy.length) {\r\n                    for (const resourceType in containerNonEnergy[0].store) {\r\n                        if (creep.withdraw(containerNonEnergy[0], resourceType) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(containerNonEnergy[0]);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    let sources = creep.room.find(FIND_STRUCTURES, {\r\n                        filter: (s) => s.structureType == STRUCTURE_CONTAINER && s.store[RESOURCE_ENERGY] > 1500\r\n                    });\r\n                    let source = _.sortBy(sources, (s) => s.store[RESOURCE_ENERGY]).reverse();\r\n                    if (source.length) {\r\n                        if (creep.withdraw(source[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(source[0]);\r\n                        }\r\n                    }\r\n                    else if (creep.room.storage && creep.room.storage.store[RESOURCE_ENERGY] > 300) {\r\n                        if (creep.withdraw(creep.room.storage, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                            creep.moveTo(creep.room.storage);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let exit = creep.room.findExitTo(creep.memory.homeRoom);\r\n            creep.moveTo(creep.pos.findClosestByRange(exit));\r\n        }\r\n    }\r\n};\r\n//# sourceMappingURL=TrashHarvester.js.map","references":["D:/Screeps文件/Screeps/src/modules/Creep/Harvester.ts","D:/Screeps文件/Screeps/src/modules/Creep/Upgrader.ts","D:/Screeps文件/Screeps/src/modules/Creep/Builder.ts"],"map":"{\"version\":3,\"file\":\"TrashHarvester.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/modules/Creep/TrashHarvester.ts\"],\"names\":[],\"mappings\":\"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\"}"}
