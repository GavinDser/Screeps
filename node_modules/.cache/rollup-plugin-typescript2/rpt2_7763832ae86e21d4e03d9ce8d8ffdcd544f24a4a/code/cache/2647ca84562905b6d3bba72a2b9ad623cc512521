{"code":"export const Attacker = {\r\n    run: function (creep) {\r\n        if (creep.room.name == creep.memory.targetRoom) {\r\n            let t;\r\n            let sInvaderCore = creep.room.find(FIND_STRUCTURES, { filter: (s) => s.structureType == STRUCTURE_INVADER_CORE });\r\n            let enemyCreep = creep.room.find(FIND_HOSTILE_CREEPS);\r\n            let damagedCreep = creep.room.find(FIND_MY_CREEPS, { filter: (c) => c.hits < c.hitsMax });\r\n            let position;\r\n            if (creep.memory.homeRoom == \"E35S47\") {\r\n                position = new RoomPosition(7, 21, creep.memory.targetRoom);\r\n            }\r\n            else if (creep.memory.homeRoom == \"E39S47\") {\r\n                position = new RoomPosition(12, 7, creep.memory.targetRoom);\r\n            }\r\n            if (enemyCreep.length) {\r\n                t = enemyCreep[0];\r\n            }\r\n            else if (sInvaderCore.length) {\r\n                t = sInvaderCore[0];\r\n            }\r\n            if (creep.attack(t) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(t.pos);\r\n            }\r\n            else if (creep.rangedAttack(t) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(t.pos);\r\n            }\r\n            if (!sInvaderCore.length && !enemyCreep.length) {\r\n                creep.moveTo(position, { ignoreSwamps: true });\r\n            }\r\n            if (creep.pos.isEqualTo(position)) {\r\n                if (damagedCreep.length) {\r\n                    creep.heal(damagedCreep[0]);\r\n                }\r\n                else {\r\n                    creep.heal(creep);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let exit = creep.room.findExitTo(creep.memory.targetRoom);\r\n            creep.moveTo(creep.pos.findClosestByRange(exit));\r\n        }\r\n    }\r\n};\r\n//# sourceMappingURL=attacker.js.map","references":[],"map":"{\"version\":3,\"file\":\"attacker.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/modules/Creep/attacker.ts\"],\"names\":[],\"mappings\":\"AAAA,MAAM,CAAC,MAAM,QAAQ,GAAG;IACpB,GAAG,EAAE,UAAS,KAAY;QACtB,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC,UAAU,EAAC;YAC3C,IAAI,CAAC,CAAC;YACN,IAAI,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAC,MAAM,EAAE,CAAC,CAAc,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,IAAI,sBAAsB,EAAC,CAAC,CAAA;YAC5H,IAAI,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACtD,IAAI,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,EAAC,MAAM,EAAC,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC,CAAC,IAAI,GAAC,CAAC,CAAC,OAAO,EAAC,CAAC,CAAC;YAEpF,IAAI,QAAQ,CAAC;YAEb,IAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,IAAI,QAAQ,EAAC;gBACjC,QAAQ,GAAG,IAAI,YAAY,CAAC,CAAC,EAAC,EAAE,EAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;aAC7D;iBACI,IAAI,KAAK,CAAC,MAAM,CAAC,QAAQ,IAAI,QAAQ,EAAC;gBACvC,QAAQ,GAAG,IAAI,YAAY,CAAC,EAAE,EAAC,CAAC,EAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;aAC7D;YAED,IAAI,UAAU,CAAC,MAAM,EAAC;gBAClB,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAA;aACpB;iBACI,IAAI,YAAY,CAAC,MAAM,EAAC;gBACzB,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;aACtB;YAED,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,gBAAgB,EAAC;gBACpC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;aACtB;iBACI,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,gBAAgB,EAAC;gBAC/C,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;aACtB;YACD,IAAI,CAAC,YAAY,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,EAAC;gBAC3C,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAC,EAAC,YAAY,EAAC,IAAI,EAAC,CAAC,CAAC;aAC9C;YACD,IAAI,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAC;gBAC9B,IAAG,YAAY,CAAC,MAAM,EAAC;oBACnB,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAA;iBAC9B;qBACG;oBACA,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACrB;aACJ;SACJ;aACG;YACA,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAiB,CAAC;YAC1E,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;SACpD;IACL,CAAC;CACJ,CAAA\"}"}
