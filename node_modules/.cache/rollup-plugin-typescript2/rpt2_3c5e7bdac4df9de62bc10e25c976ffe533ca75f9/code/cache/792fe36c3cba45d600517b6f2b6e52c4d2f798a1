{"code":"export const Harvester = {\r\n    /** @param {Creep} creep **/\r\n    run: function (creep, linkList) {\r\n        if (!creep.memory.working && creep.store[RESOURCE_ENERGY] == 0) {\r\n            creep.memory.working = true;\r\n        }\r\n        if (creep.memory.working && creep.store.getFreeCapacity() == 0) {\r\n            creep.memory.working = false;\r\n        }\r\n        if (!creep.memory.working) {\r\n            var extensions = creep.room.find(FIND_STRUCTURES, {\r\n                filter: (structure) => {\r\n                    return (structure.structureType == STRUCTURE_EXTENSION && structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0);\r\n                }\r\n            });\r\n            var towers = creep.room.find(FIND_STRUCTURES, {\r\n                filter: (structure) => {\r\n                    return (structure.structureType == STRUCTURE_TOWER && structure.store[RESOURCE_ENERGY] <= 500);\r\n                }\r\n            });\r\n            var spawns = creep.room.find(FIND_STRUCTURES, { filter: (s) => s.structureType == STRUCTURE_SPAWN && s.store.getFreeCapacity(RESOURCE_ENERGY) > 0 });\r\n            extensions = _.sortBy(extensions, (s) => creep.pos.getRangeTo(s)); //creep.pos.getRangeTo\r\n            towers = _.sortBy(towers, (s) => creep.pos.getRangeTo(s)); //creep.pos.getRangeTo\r\n            if (extensions.length) {\r\n                if (creep.transfer(extensions[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(extensions[0], { visualizePathStyle: { stroke: '#ffffff' } });\r\n                }\r\n            }\r\n            else if (towers.length) {\r\n                if (creep.transfer(towers[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(towers[0], { visualizePathStyle: { stroke: '#ffffff' } });\r\n                }\r\n            }\r\n            // if tower and extensions are full\r\n            else if (spawns.length) {\r\n                if (creep.transfer(spawns[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(spawns[0]);\r\n                }\r\n            }\r\n            //if nothing to store or carrying not ENERGY-ONLY\r\n            else {\r\n                var storage = creep.room.storage;\r\n                for (const resourceType in creep.store) {\r\n                    if (creep.transfer(storage, resourceType) == ERR_NOT_IN_RANGE) {\r\n                        creep.moveTo(storage);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // if (creep.withdraw(creep.room.storage,RESOURCE_ENERGY) == ERR_NOT_IN_RANGE){\r\n            //     creep.moveTo(creep.room.storage)\r\n            // }\r\n            var unfilledExtension = creep.room.find(FIND_STRUCTURES, {\r\n                filter: (s) => s.structureType == STRUCTURE_EXTENSION && s.store.getFreeCapacity(RESOURCE_ENERGY) > 0\r\n            });\r\n            if (linkList[1].store.getUsedCapacity(RESOURCE_ENERGY) > 0 && unfilledExtension.length) {\r\n                if (creep.withdraw(linkList[1], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(linkList[1]);\r\n                }\r\n            }\r\n            else if (linkList[0].store.getUsedCapacity(RESOURCE_ENERGY) > 0 && !(unfilledExtension.length)) {\r\n                if (creep.withdraw(linkList[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(linkList[0]);\r\n                }\r\n            }\r\n            else {\r\n                let sources = creep.room.find(FIND_STRUCTURES, {\r\n                    filter: (s) => s.structureType == STRUCTURE_CONTAINER && s.store[RESOURCE_ENERGY] > 0\r\n                });\r\n                let source = _.sortBy(sources, (s) => s.store[RESOURCE_ENERGY]).reverse();\r\n                if (source.length) {\r\n                    if (creep.withdraw(source[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                        creep.moveTo(source[0]);\r\n                    }\r\n                }\r\n                else {\r\n                    if (creep.harvest(creep.pos.findClosestByRange(FIND_SOURCES_ACTIVE)) == ERR_NOT_IN_RANGE) {\r\n                        creep.moveTo(creep.pos.findClosestByRange(FIND_SOURCES_ACTIVE), { visualizePathStyle: { stroke: '#ffaa00' } });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n//# sourceMappingURL=Harvester.js.map","references":[],"map":"{\"version\":3,\"file\":\"Harvester.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/modules/Creep/Harvester.ts\"],\"names\":[],\"mappings\":\"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\"}"}
